#!/usr/bin/env python

"""
    Usage: ./build_agent x.x.x {platform}

    Example: ./build_agent 0.7.1 deb
"""

import os
import re
import sys
import shutil
import fnmatch
import subprocess

BUILD_DIRS = ['../bin', '../daemon', '../plugins', '../src', '../deps']
BUILD_FILES = [
    '../agent.py', '../watcher_mac.py', '../agent.config', 'agent_utils'
]
INSTALL_SCRIPT = 'agent_utils'

# Patterns/files/directories to ignore when copying directories
IGNORE_PATTERNS = ['*.pyc', '../plugins/ra', '../bin/vine-server']


COMPILED_PYTHON_PATHS = {
    'mac': '../deps/mac/Python-2.7.5',
    #'deb': '../deps/deb/Python-2.7.5',
    'rpm5_64': '../deps/rpm/Python-2.7.5',
    'rpm6_64': '../deps/rpm6/Python-2.7.5',
    'rpm5_32': '../deps/rpm-32/Python-2.7.5',
    'rpm6_32': '../deps/rpm6-32/Python-2.7.5'
}


def del_existing_dir(dir_name):
    if os.path.exists(dir_name):
        print 'Removing existing dir: {0}'.format(dir_name)
        shutil.rmtree(dir_name)
        print '{0} removed.'.format(dir_name)


def ignore_unnecessary_pythons(platform):
    for py_platform in COMPILED_PYTHON_PATHS:
        if platform != py_platform:
            IGNORE_PATTERNS.append(COMPILED_PYTHON_PATHS[py_platform])


def ignore_files(dir_name, dir_contents):
    ignore = []
    for pattern in IGNORE_PATTERNS:
        if '/' in pattern:
            _dir = os.path.dirname(pattern)
            _base_name = os.path.basename(pattern)

            if _dir == dir_name:
                ignore.extend(fnmatch.filter(dir_contents, _base_name))

        else:
            ignore.extend(fnmatch.filter(dir_contents, pattern))

    if ignore:
        print ignore

    return set(ignore)


def copy_dirs(dest):
    global BUILD_DIRS

    for b_dir in BUILD_DIRS:
        shutil.copytree(
            b_dir,
            os.path.join(dest, os.path.basename(b_dir)),
            ignore=ignore_files
        )

    remove_empty_dirs(dest)


def remove_empty_dirs(search_dir):
    for root, dirnames, _ in os.walk(search_dir):
        full_root = os.path.join(search_dir, root)
        for _dir in dirnames:
            if len(os.listdir(os.path.join(root, _dir))) <= 0:
                os.rmdir(os.path.join(root, _dir))

        if len(os.listdir(root)) <= 0:
            os.rmdir(root)


def copy_files(dest):
    global BUILD_FILES

    for _file in BUILD_FILES:
        shutil.copy(_file, dest)


def modify_config_version(config_path, version, platform):
    f = open(config_path, 'r')
    try:
        file_content = f.read()
    finally:
        f.close()

    f = open(config_path, 'w')
    try:
        new_content = file_content.splitlines()

        for line in new_content:
            if re.match('^version =.*', line):
                line_position = new_content.index(line)

                new_content[line_position] = 'version = {0}'.format(
                    version + '-' + platform
                )

        f.write('\n'.join(new_content))

    finally:
        f.close()


def mac_build(build_name, folder_name):
    dmg_name = build_name + '.dmg'

    cmd = [
        '/usr/bin/hdiutil',
        'create',
        dmg_name,
        '-srcfolder',
        folder_name,
        '-ov'
    ]
    subprocess.call(cmd)


def create_zip(build_name, folder_name):
    zip_name = build_name + '.zip'

    cmd = ['zip', '-r', zip_name, folder_name]
    subprocess.call(cmd)


def create_tar(build_name, folder_name):
    tar_name = build_name + '.tar.gz'

    cmd = ['tar', '-czf', tar_name, folder_name]
    subprocess.call(cmd)


def deb_build(build_name, folder_name):
    create_tar(build_name, folder_name)


def rpm_build(build_name, folder_name):
    create_tar(build_name, folder_name)


SUPPORTED_PLATFORMS = {
    'mac': mac_build,
    'deb': deb_build,
    'rpm5_64': rpm_build,
    'rpm6_64': rpm_build,
    'rpm5_32': rpm_build,
    'rpm6_32': rpm_build
}


def build(version, platform):
    global INSTALL_SCRIPT
    global SUPPORTED_PLATFORMS

    agent_pkg_dir = 'VFAgent_' + version.replace('.', '_')

    del_existing_dir(agent_pkg_dir)

    os.makedirs(agent_pkg_dir, 0755)

    agent_dir_path = os.path.join(agent_pkg_dir, 'agent')
    os.makedirs(agent_dir_path, 0755)

    ignore_unnecessary_pythons(platform)

    print 'Copying needed directories.'
    copy_dirs(agent_dir_path)

    print 'Copying needed files.'
    copy_files(agent_dir_path)

    print 'Copying install script.'
    shutil.copy(INSTALL_SCRIPT, os.path.join(agent_pkg_dir, 'install'))

    print 'Setting agent version.'
    modify_config_version(
        os.path.join(agent_dir_path, 'agent.config'), version, platform
    )

    print 'Creating final product.'
    SUPPORTED_PLATFORMS[platform](
        agent_pkg_dir + '-' + platform, agent_pkg_dir
    )


def main():
    global SUPPORTED_PLATFORMS

    version = sys.argv[1]
    platform = sys.argv[2]

    if version.count('.') != 2:
        print 'Please follow the version format "x.x.x"'
        sys.exit(1)

    if platform == 'all':
        for platform in SUPPORTED_PLATFORMS:
            build(version, platform)
    elif platform in SUPPORTED_PLATFORMS:
        build(version, platform)
    else:
        print '{0} is not supported.'.format(platform)
        print 'Supported platforms are: {0}'.format(SUPPORTED_PLATFORMS.keys())
        sys.exit(1)


if __name__ == '__main__':
    main()
